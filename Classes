lass Node:
    def __init__(self, value):
        self.data = value
        self.front = None 

class Stack:
    def __init__(self):
        self.head = None
        self.count = 0

    def push(self, value):
        #make new node
        new_node = Node(value)
        self.count += 1

        if self.head is not None:
            #make new node point to the old node
            new_node.front = self.head
        # make head point to the new element
        self.head = new_node

    def is_empty(self):
        if self.head is None:
            return True
        else:
            return False

    def pop(self):
        if not self.is_empty():
            self.count -= 1
            temp = self.head.data
            # make head point to the node after the node that will be poped
            self.head = self.head.front
            return temp
        else:
            print("can not pop items from an empty list")

    def peek(self):
        return self.head.data

    def __iter__(self):
        # start from the node that head refers to
        node = self.head
        while node:
            yield node
            node = node.front

    def stack_search(self, value):
        # start from the head
        p = self.head
        while p is not None:
            # make p reference to next node
            if p.front is not None:
                if p.data == value:
                    print("Found value")
                    return p.data
                p = p.front
            else:
                print("fail")
                return 0

    def length(self):
        return self.count
